# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: 
    - main
    - develop
    - test
  pull_request:
    branches:
    - main
    - develop
    - test

jobs:
  build:

    runs-on: ubuntu-20.04


    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
        distribution: 'adopt'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      working-directory: ./coffang
       
    - name: Build with Gradle
      run: ./gradlew build
      working-directory: ./coffang
      
#     - name: Login to DockerHub
#       uses: docker/login-action@v1
#       with:
#           username: ${{secrets.DOCKERHUB_USERNAME}}
#           password: ${{secrets.DOCKERHUB_TOKEN}}
          
 # Docker
    - name: Docker build and push
      run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          working-directory: ./coffang
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} .
          working-directory: ./coffang
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
          working-directory: ./coffang
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
          host: ${{ secrets.EC2_HOST}}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            sudo docker stop toastserver
            sudo docker rm toastserver
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
            sudo docker run -d --name toastserver -p 8888:8080 \
            -e "TZ=Asia/Seoul" -e RDS_URL=${{ secrets.RDS_URL }} -e RDS_USERNAME=${{ secrets.RDS_USERNAME }} -e RDS_PASSWORD=${{ secrets.RDS_PASSWORD }} -e KAKAO_REST_API=${{ secrets.KAKAO_REST_API }} \
            ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest
            sudo docker image prune -f
